import { ArraysCollector } from './collectors/as-arrays.js';
import { EntriesCollector } from './collectors/as-entries.js';
import { MapCollector } from './collectors/as-map.js';
import { ObjectCollector } from './collectors/as-object.js';
import { TuplesCollector } from './collectors/as-tuples.js';
import { KeysCollector } from './collectors/keys.js';
export declare type KeyingFunction<K, V> = (t: V, idx: number) => K;
/**
 * Group the items with the given key, which can be either a property name
 * or a custom function.
 *
 * The argument of the keying function is the item. Its return value is used
 * as the group key for that item.
 *
 * @param key The keying function or property name.
 * @returns A collectable object.
 */
export declare type GroupingFunction<V> = <K = any>(key: string | KeyingFunction<K, V>) => Collectable<K, V>;
export interface Groupable<V> {
    readonly by: GroupingFunction<V>;
}
export interface Collectable<K, V> {
    readonly asArrays: ArraysCollector<V>;
    readonly asEntries: EntriesCollector<K, V>;
    readonly asObject: ObjectCollector<K, V>;
    readonly asMap: MapCollector<K, V>;
    readonly asTuples: TuplesCollector<K, V>;
    readonly keys: KeysCollector<K>;
}
export declare function group(items: Iterable<never>): Groupable<any>;
export declare function group<V>(items: Iterable<V>): Groupable<V>;
