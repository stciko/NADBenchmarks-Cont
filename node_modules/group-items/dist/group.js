"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.group = void 0;
const deep_eql_1 = __importDefault(require("deep-eql"));
const find_or_create_js_1 = require("./util/find-or-create.js");
const as_arrays_js_1 = require("./collectors/as-arrays.js");
const as_entries_js_1 = require("./collectors/as-entries.js");
const as_map_js_1 = require("./collectors/as-map.js");
const as_object_js_1 = require("./collectors/as-object.js");
const as_tuples_js_1 = require("./collectors/as-tuples.js");
const keys_js_1 = require("./collectors/keys.js");
// UTILITY METHODS
/**
 * Create a grouping of the items with the given keying function.
 *
 * The keying function receives a single argument - the item - and must return
 * the key to be used for that item.
 *
 * The result of this method is an array of objects containing:
 * - key: the common key value of the items in this group
 * - items: array of items in this group
 *
 * @param items Item iterable.
 * @param keyFn Keying function.
 * @returns Array of groups.
 */
function createGrouping(items, keyFn) {
    const groups = [];
    let idx = 0;
    for (const item of items) {
        const itemKey = keyFn(item, idx);
        idx++;
        const predicate = (g) => (0, deep_eql_1.default)(g.key, itemKey);
        const construct = () => ({ key: itemKey, items: [] });
        (0, find_or_create_js_1.findOrCreate)(groups, predicate, construct).items.push(item);
    }
    return groups;
}
/**
 * Start a grouping over the given items.
 *
 * @param items Some iterable collection of items.
 * @returns A groupable object.
 */
function group(items) {
    const by = (key) => {
        // create grouping with resolved keying function
        const keyFn = typeof key === 'function' ? key : (item) => item[key];
        const groups = createGrouping(items, keyFn);
        // return collectors
        return Object.freeze({
            asArrays: (0, as_arrays_js_1.asArraysFactory)(groups),
            asEntries: (0, as_entries_js_1.asEntriesFactory)(groups),
            asMap: (0, as_map_js_1.asMapFactory)(groups),
            asObject: (0, as_object_js_1.asObjectFactory)(groups),
            asTuples: (0, as_tuples_js_1.asTuplesFactory)(groups),
            keys: (0, keys_js_1.keysFactory)(groups)
        });
    };
    return Object.freeze({ by });
}
exports.group = group;
