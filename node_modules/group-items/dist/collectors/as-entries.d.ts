import { Grouping } from '../types.js';
export interface EntriesCollectorOptions {
    keyName?: string;
    itemsName?: string;
}
export declare type EntriesCollection<K, V> = Array<{
    key: K;
    items: V[];
}>;
/**
 * Convert the grouping to an array of entry objects.
 *
 * Options:
 * - keyName: name of `key` property in resulting objects
 * - itemsName: name of `items` property in resulting objects
 *
 * @param options Collector options.
 * @returns The resulting array.
 */
export declare type EntriesCollector<K, V> = <Opt extends {
    keyName: 'key';
    itemsName: 'items';
} | EntriesCollectorOptions | undefined | null = undefined>(options?: Opt) => Opt extends undefined | null | {
    keyName: 'key';
    itemsName: 'items';
} | {
    itemsName: 'items';
} | {
    keyName: 'key';
} ? EntriesCollection<K, V> : Array<Record<string, K | V[]>>;
/**
 * Create an EntriesCollector for the given grouping.
 *
 * @param groups The grouping.
 * @returns The created collector.
 */
export declare function asEntriesFactory<K, V>(groups: Grouping<K, V>): EntriesCollector<K, V>;
