/// <reference types="./index.d.ts" />
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@emotion/react/jsx-runtime'), require('@mui/material'), require('react'), require('@mui/icons-material'), require('zustand'), require('zustand/context'), require('zustand/middleware'), require('copy-to-clipboard'), require('group-items')) :
  typeof define === 'function' && define.amd ? define(['exports', '@emotion/react/jsx-runtime', '@mui/material', 'react', '@mui/icons-material', 'zustand', 'zustand/context', 'zustand/middleware', 'copy-to-clipboard', 'group-items'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.JsonViewer = {}, global["@emotion/react/jsx-runtime"], global["@mui/material"], global.react, global["@mui/icons-material"], global.zustand, global["zustand/context"], global["zustand/middleware"], global["copy-to-clipboard"], global["group-items"]));
})(this, (function (exports, jsxRuntime, material, React, iconsMaterial, create, createContext, middleware, copyToClipboard, groupItems) { 'use strict';

  const lightColorspace = {
      scheme: 'Light Theme',
      author: 'mac gainor (https://github.com/mac-s-g)',
      base00: 'rgba(0, 0, 0, 0)',
      base01: 'rgb(245, 245, 245)',
      base02: 'rgb(235, 235, 235)',
      base03: '#93a1a1',
      base04: 'rgba(0, 0, 0, 0.3)',
      base05: '#586e75',
      base06: '#073642',
      base07: '#002b36',
      base08: '#d33682',
      base09: '#cb4b16',
      base0A: '#dc322f',
      base0B: '#859900',
      base0C: '#6c71c4',
      base0D: '#586e75',
      base0E: '#2aa198',
      base0F: '#268bd2'
  };
  const darkColorspace = {
      scheme: 'Dark Theme',
      author: 'Chris Kempson (http://chriskempson.com)',
      base00: '#181818',
      base01: '#282828',
      base02: '#383838',
      base03: '#585858',
      base04: '#b8b8b8',
      base05: '#d8d8d8',
      base06: '#e8e8e8',
      base07: '#f8f8f8',
      base08: '#ab4642',
      base09: '#dc9656',
      base0A: '#f7ca88',
      base0B: '#a1b56c',
      base0C: '#86c1b9',
      base0D: '#7cafc2',
      base0E: '#ba8baf',
      base0F: '#a16946'
  };

  const DefaultKeyRenderer = ()=>null;
  DefaultKeyRenderer.when = ()=>false;
  var _props_enableClipboard, _props_indentWidth, _props_groupArraysAfterLength, _props_collapseStringsAfterLength, _props_maxDisplayLength, _props_rootName, _props_onChange, _props_onCopy, _props_keyRenderer, _props_editable, _props_defaultInspectDepth, _props_objectSortKeys, _props_quotesOnKeys, _props_displayDataTypes, _props_displayObjectSize;
  const createJsonViewerStore = (props)=>create(middleware.combine({
          // provided by user
          enableClipboard: (_props_enableClipboard = props.enableClipboard) !== null && _props_enableClipboard !== void 0 ? _props_enableClipboard : true,
          indentWidth: (_props_indentWidth = props.indentWidth) !== null && _props_indentWidth !== void 0 ? _props_indentWidth : 3,
          groupArraysAfterLength: (_props_groupArraysAfterLength = props.groupArraysAfterLength) !== null && _props_groupArraysAfterLength !== void 0 ? _props_groupArraysAfterLength : 100,
          collapseStringsAfterLength: props.collapseStringsAfterLength === false ? Number.MAX_VALUE : (_props_collapseStringsAfterLength = props.collapseStringsAfterLength) !== null && _props_collapseStringsAfterLength !== void 0 ? _props_collapseStringsAfterLength : 50,
          maxDisplayLength: (_props_maxDisplayLength = props.maxDisplayLength) !== null && _props_maxDisplayLength !== void 0 ? _props_maxDisplayLength : 30,
          rootName: (_props_rootName = props.rootName) !== null && _props_rootName !== void 0 ? _props_rootName : 'root',
          onChange: (_props_onChange = props.onChange) !== null && _props_onChange !== void 0 ? _props_onChange : ()=>{},
          onCopy: (_props_onCopy = props.onCopy) !== null && _props_onCopy !== void 0 ? _props_onCopy : undefined,
          keyRenderer: (_props_keyRenderer = props.keyRenderer) !== null && _props_keyRenderer !== void 0 ? _props_keyRenderer : DefaultKeyRenderer,
          editable: (_props_editable = props.editable) !== null && _props_editable !== void 0 ? _props_editable : false,
          defaultInspectDepth: (_props_defaultInspectDepth = props.defaultInspectDepth) !== null && _props_defaultInspectDepth !== void 0 ? _props_defaultInspectDepth : 5,
          objectSortKeys: (_props_objectSortKeys = props.objectSortKeys) !== null && _props_objectSortKeys !== void 0 ? _props_objectSortKeys : false,
          quotesOnKeys: (_props_quotesOnKeys = props.quotesOnKeys) !== null && _props_quotesOnKeys !== void 0 ? _props_quotesOnKeys : true,
          displayDataTypes: (_props_displayDataTypes = props.displayDataTypes) !== null && _props_displayDataTypes !== void 0 ? _props_displayDataTypes : true,
          // internal state
          inspectCache: {},
          hoverPath: null,
          colorspace: lightColorspace,
          value: props.value,
          displayObjectSize: (_props_displayObjectSize = props.displayObjectSize) !== null && _props_displayObjectSize !== void 0 ? _props_displayObjectSize : true
      }, (set, get)=>({
              getInspectCache: (path, nestedIndex)=>{
                  const target = nestedIndex !== undefined ? path.join('.') + `[${nestedIndex}]nt` : path.join('.');
                  return get().inspectCache[target];
              },
              setInspectCache: (path, action, nestedIndex)=>{
                  const target = nestedIndex !== undefined ? path.join('.') + `[${nestedIndex}]nt` : path.join('.');
                  set((state)=>({
                          inspectCache: {
                              ...state.inspectCache,
                              [target]: typeof action === 'function' ? action(state.inspectCache[target]) : action
                          }
                      }));
              },
              setHover: (path, nestedIndex)=>{
                  set({
                      hoverPath: path ? {
                          path,
                          nestedIndex
                      } : null
                  });
              }
          })));
  const { useStore: useJsonViewerStore , useStoreApi: useJsonViewerStoreApi , Provider: JsonViewerProvider  } = createContext();

  const useTextColor = ()=>{
      return useJsonViewerStore((store)=>store.colorspace.base07);
  };

  /**
   * useClipboard hook accepts one argument options in which copied status timeout duration is defined (defaults to 2000). Hook returns object with properties:
   * - copy – function to copy value to clipboard
   * - copied – value that indicates that copy handler was called less than options.timeout ms ago
   * - reset – function to clear timeout and reset copied to false
   */ function useClipboard({ timeout =2000  } = {}) {
      const [copied, setCopied] = React.useState(false);
      const copyTimeout = React.useRef(null);
      const handleCopyResult = React.useCallback((value)=>{
          const current = copyTimeout.current;
          if (current) {
              window.clearTimeout(current);
          }
          copyTimeout.current = window.setTimeout(()=>setCopied(false), timeout);
          setCopied(value);
      }, [
          timeout
      ]);
      const onCopy = useJsonViewerStore((store)=>store.onCopy);
      const copy = React.useCallback((path, value)=>{
          if (typeof onCopy === 'function') {
              try {
                  const result = onCopy(path, value);
                  if (result instanceof Promise) {
                      result.then(()=>{
                          handleCopyResult(true);
                      }).catch((error)=>{
                          console.error(`error when copy ${path.length === 0 ? 'src' : `src[${path.join('.')}`}]`, error);
                      });
                  } else {
                      handleCopyResult(true);
                  }
              } catch (error) {
                  console.error(`error when copy ${path.length === 0 ? 'src' : `src[${path.join('.')}`}]`, error);
              }
          } else {
              const valueToCopy = JSON.stringify(typeof value === 'function' ? value.toString() : value, null, '  ');
              if ('clipboard' in navigator) {
                  navigator.clipboard.writeText(valueToCopy).then(()=>handleCopyResult(true))// When navigator.clipboard throws an error, fallback to copy-to-clipboard package
                  .catch(()=>copyToClipboard(valueToCopy));
              } else {
                  // fallback to copy-to-clipboard when navigator.clipboard is not available
                  copyToClipboard(valueToCopy);
              }
          }
      }, [
          handleCopyResult,
          onCopy
      ]);
      const reset = React.useCallback(()=>{
          setCopied(false);
          if (copyTimeout.current) {
              clearTimeout(copyTimeout.current);
          }
      }, []);
      return {
          copy,
          reset,
          copied
      };
  }

  const applyValue = (obj, path, value)=>{
      if (typeof obj !== 'object' || obj === null) {
          if (path.length !== 0) {
              throw new Error('path is incorrect');
          }
          return value;
      }
      const arr = [
          ...path
      ];
      let key;
      if (path.length > 0) {
          key = arr[0];
          if (key === '__proto__') {
              throw new TypeError('don\'t modify __proto__!!!');
          }
          if (arr.length > 1) {
              arr.shift();
              obj[key] = applyValue(obj[key], arr, value);
          } else {
              obj[key] = value;
          }
      }
      return obj;
  };
  function createDataType(is, Component, Editor, PreComponent, PostComponent) {
      return {
          is,
          Component,
          Editor,
          PreComponent,
          PostComponent
      };
  }
  const isCycleReference = (root, path, value)=>{
      if (root === null || value === null) {
          return false;
      }
      if (typeof root !== 'object') {
          return false;
      }
      if (typeof value !== 'object') {
          return false;
      }
      if (Object.is(root, value) && path.length !== 0) {
          return '';
      }
      const currentPath = [];
      const arr = [
          ...path
      ];
      let currentRoot = root;
      while(currentRoot !== value || arr.length !== 0){
          if (typeof currentRoot !== 'object' || currentRoot === null) {
              return false;
          }
          if (Object.is(currentRoot, value)) {
              return currentPath.reduce((path, value, currentIndex)=>{
                  if (typeof value === 'number') {
                      return path + `[${value}]`;
                  }
                  return path + `${currentIndex === 0 ? '' : '.'}${value}`;
              }, '');
          }
          const target = arr.shift();
          currentPath.push(target);
          currentRoot = currentRoot[target];
      }
      return false;
  };

  function useIsCycleReference(path, value) {
      const rootValue = useJsonViewerStore((store)=>store.value);
      return React.useMemo(()=>isCycleReference(rootValue, path, value), [
          path,
          value,
          rootValue
      ]);
  }

  function useInspect(path, value, nestedIndex) {
      const depth = path.length;
      const isTrap = useIsCycleReference(path, value);
      const getInspectCache = useJsonViewerStore((store)=>store.getInspectCache);
      const setInspectCache = useJsonViewerStore((store)=>store.setInspectCache);
      const defaultInspectDepth = useJsonViewerStore((store)=>store.defaultInspectDepth);
      React.useEffect(()=>{
          const inspect = getInspectCache(path, nestedIndex);
          if (inspect !== undefined) {
              return;
          }
          if (nestedIndex !== undefined) {
              setInspectCache(path, false, nestedIndex);
          } else {
              // do not inspect when it is a cycle reference, otherwise there will have a loop
              const inspect1 = isTrap ? false : depth < defaultInspectDepth;
              setInspectCache(path, inspect1);
          }
      }, [
          defaultInspectDepth,
          depth,
          getInspectCache,
          isTrap,
          nestedIndex,
          path,
          setInspectCache
      ]);
      const [inspect, set] = React.useState(()=>{
          const shouldInspect = getInspectCache(path, nestedIndex);
          if (shouldInspect !== undefined) {
              return shouldInspect;
          }
          if (nestedIndex !== undefined) {
              return false;
          }
          return isTrap ? false : depth < defaultInspectDepth;
      });
      const setInspect = React.useCallback((apply)=>{
          set((oldState)=>{
              const newState = typeof apply === 'boolean' ? apply : apply(oldState);
              setInspectCache(path, newState, nestedIndex);
              return newState;
          });
      }, [
          nestedIndex,
          path,
          setInspectCache
      ]);
      return [
          inspect,
          setInspect
      ];
  }

  /// <reference types="./utils.d.ts" />
  class DevelopmentError extends Error {
      constructor(message){
          super(message ? `${message}\n` : '' + 'The behavior is not expected and not allowed.\n' + 'If you see this in development, please fix the error ASAP.\n' + 'If you see this in production, please contract our customer service.\n');
      }
  }

  const DataBox = material.styled((props)=>/*#__PURE__*/ jsxRuntime.jsx(material.Box, {
          component: "div",
          ...props
      }))`
  display: inline-block;
`;

  const DataTypeLabel = ({ dataType , enable =true  })=>{
      if (!enable) {
          return null;
      }
      return /*#__PURE__*/ jsxRuntime.jsx(DataBox, {
          className: "data-type-label",
          sx: {
              mx: 0.5,
              fontSize: '0.7rem',
              opacity: 0.8
          },
          children: dataType
      });
  };

  function createEasyType(type, renderValue, config) {
      var _config_displayTypeLabel;
      const displayTypeLabel = (_config_displayTypeLabel = config.displayTypeLabel) !== null && _config_displayTypeLabel !== void 0 ? _config_displayTypeLabel : true;
      const Render = /*#__PURE__*/ React.memo(renderValue);
      const EasyType = (props)=>{
          const storeDisplayDataTypes = useJsonViewerStore((store)=>store.displayDataTypes);
          const color = useJsonViewerStore((store)=>store.colorspace[config.colorKey]);
          return /*#__PURE__*/ jsxRuntime.jsxs(DataBox, {
              sx: {
                  color
              },
              children: [
                  displayTypeLabel && storeDisplayDataTypes && /*#__PURE__*/ jsxRuntime.jsx(DataTypeLabel, {
                      dataType: type
                  }),
                  /*#__PURE__*/ jsxRuntime.jsx(DataBox, {
                      className: `${type}-value`,
                      children: /*#__PURE__*/ jsxRuntime.jsx(Render, {
                          value: props.value
                      })
                  })
              ]
          });
      };
      EasyType.displayName = `easy-${type}-type`;
      if (!config.fromString) {
          return {
              Component: EasyType
          };
      }
      const fromString = config.fromString;
      const EasyTypeEditor = ({ value , setValue  })=>{
          const color = useJsonViewerStore((store)=>store.colorspace[config.colorKey]);
          return /*#__PURE__*/ jsxRuntime.jsx(material.InputBase, {
              value: `${value}`,
              onChange: React.useCallback((event)=>{
                  const value = fromString(event.target.value);
                  setValue(value);
              }, [
                  setValue
              ]),
              size: "small",
              multiline: true,
              sx: {
                  color,
                  padding: 0.5,
                  borderStyle: 'solid',
                  borderColor: 'black',
                  borderWidth: 1,
                  fontSize: '0.8rem',
                  fontFamily: 'monospace',
                  display: 'inline-flex'
              }
          });
      };
      EasyTypeEditor.displayName = `easy-${type}-type-editor`;
      return {
          Component: EasyType,
          Editor: EasyTypeEditor
      };
  }

  const functionBody = (func)=>{
      const funcString = func.toString();
      let isUsualFunction = true;
      const parenthesisPos = funcString.indexOf(')');
      const arrowPos = funcString.indexOf('=>');
      if (arrowPos !== -1 && arrowPos > parenthesisPos) {
          isUsualFunction = false;
      }
      if (isUsualFunction) {
          return funcString.substring(funcString.indexOf('{', parenthesisPos) + 1, funcString.lastIndexOf('}'));
      }
      return funcString.substring(funcString.indexOf('=>') + 2);
  };
  const functionName = (func)=>{
      const funcString = func.toString();
      const isUsualFunction = funcString.indexOf('function') !== -1;
      if (isUsualFunction) {
          return funcString.substring(8, funcString.indexOf('{')).trim();
      }
      return funcString.substring(0, funcString.indexOf('=>') + 2).trim();
  };
  const lb = '{';
  const rb = '}';
  const PreFunctionType = (props)=>{
      return /*#__PURE__*/ jsxRuntime.jsxs(material.NoSsr, {
          children: [
              /*#__PURE__*/ jsxRuntime.jsx(DataTypeLabel, {
                  dataType: "function"
              }),
              /*#__PURE__*/ jsxRuntime.jsxs(material.Box, {
                  component: "span",
                  className: "data-function-start",
                  sx: {
                      letterSpacing: 0.5
                  },
                  children: [
                      functionName(props.value),
                      ' ',
                      lb
                  ]
              })
          ]
      });
  };
  const PostFunctionType = ()=>{
      return /*#__PURE__*/ jsxRuntime.jsx(material.NoSsr, {
          children: /*#__PURE__*/ jsxRuntime.jsx(material.Box, {
              component: "span",
              className: "data-function-end",
              children: rb
          })
      });
  };
  const FunctionType = (props)=>{
      const functionColor = useJsonViewerStore((store)=>store.colorspace.base05);
      return /*#__PURE__*/ jsxRuntime.jsx(material.NoSsr, {
          children: /*#__PURE__*/ jsxRuntime.jsx(material.Box, {
              className: "data-function",
              sx: {
                  display: props.inspect ? 'block' : 'inline-block',
                  pl: props.inspect ? 2 : 0,
                  color: functionColor
              },
              children: props.inspect ? functionBody(props.value) : /*#__PURE__*/ jsxRuntime.jsx(material.Box, {
                  component: "span",
                  className: "data-function-body",
                  onClick: ()=>props.setInspect(true),
                  sx: {
                      '&:hover': {
                          cursor: 'pointer'
                      }
                  },
                  children: "..."
              })
          })
      });
  };

  const CircularArrowsIcon = (props)=>{
      return /*#__PURE__*/ jsxRuntime.jsx(material.SvgIcon, {
          ...props,
          children: /*#__PURE__*/ jsxRuntime.jsx("path", {
              d: "M 12 2 C 10.615 1.998 9.214625 2.2867656 7.890625 2.8847656 L 8.9003906 4.6328125 C 9.9043906 4.2098125 10.957 3.998 12 4 C 15.080783 4 17.738521 5.7633175 19.074219 8.3222656 L 17.125 9 L 21.25 11 L 22.875 7 L 20.998047 7.6523438 C 19.377701 4.3110398 15.95585 2 12 2 z M 6.5097656 4.4882812 L 2.2324219 5.0820312 L 3.734375 6.3808594 C 1.6515335 9.4550558 1.3615962 13.574578 3.3398438 17 C 4.0308437 18.201 4.9801562 19.268234 6.1601562 20.115234 L 7.1699219 18.367188 C 6.3019219 17.710187 5.5922656 16.904 5.0722656 16 C 3.5320014 13.332354 3.729203 10.148679 5.2773438 7.7128906 L 6.8398438 9.0625 L 6.5097656 4.4882812 z M 19.929688 13 C 19.794687 14.08 19.450734 15.098 18.927734 16 C 17.386985 18.668487 14.531361 20.090637 11.646484 19.966797 L 12.035156 17.9375 L 8.2402344 20.511719 L 10.892578 23.917969 L 11.265625 21.966797 C 14.968963 22.233766 18.681899 20.426323 20.660156 17 C 21.355156 15.801 21.805219 14.445 21.949219 13 L 19.929688 13 z"
          })
      });
  };

  const objectLb = '{';
  const arrayLb = '[';
  const objectRb = '}';
  const arrayRb = ']';
  function inspectMetadata(value) {
      let length;
      let name = '';
      if (Array.isArray(value)) {
          length = value.length;
      } else if (value instanceof Map || value instanceof Set) {
          name = value[Symbol.toStringTag];
          length = value.size;
      } else {
          length = Object.keys(value).length;
      }
      if (Object.prototype.hasOwnProperty.call(value, Symbol.toStringTag)) {
          name = value[Symbol.toStringTag];
      }
      return `${length} Items${name ? ` (${name})` : ''}`;
  }
  const PreObjectType = (props)=>{
      const metadataColor = useJsonViewerStore((store)=>store.colorspace.base04);
      const textColor = useTextColor();
      const isArray = React.useMemo(()=>Array.isArray(props.value), [
          props.value
      ]);
      const sizeOfValue = React.useMemo(()=>props.inspect ? inspectMetadata(props.value) : '', [
          props.inspect,
          props.value
      ]);
      const displayObjectSize = useJsonViewerStore((store)=>store.displayObjectSize);
      const isTrap = useIsCycleReference(props.path, props.value);
      return /*#__PURE__*/ jsxRuntime.jsxs(material.Box, {
          component: "span",
          className: "data-object-start",
          sx: {
              letterSpacing: 0.5
          },
          children: [
              isArray ? arrayLb : objectLb,
              displayObjectSize ? /*#__PURE__*/ jsxRuntime.jsx(material.Box, {
                  component: "span",
                  sx: {
                      pl: 0.5,
                      fontStyle: 'italic',
                      color: metadataColor
                  },
                  children: sizeOfValue
              }) : null,
              isTrap && !props.inspect ? /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
                  children: [
                      /*#__PURE__*/ jsxRuntime.jsx(CircularArrowsIcon, {
                          sx: {
                              fontSize: 12,
                              color: textColor,
                              mx: 0.5
                          }
                      }),
                      isTrap
                  ]
              }) : null
          ]
      });
  };
  const PostObjectType = (props)=>{
      const metadataColor = useJsonViewerStore((store)=>store.colorspace.base04);
      const isArray = React.useMemo(()=>Array.isArray(props.value), [
          props.value
      ]);
      const displayObjectSize = useJsonViewerStore((store)=>store.displayObjectSize);
      const sizeOfValue = React.useMemo(()=>!props.inspect ? inspectMetadata(props.value) : '', [
          props.inspect,
          props.value
      ]);
      return /*#__PURE__*/ jsxRuntime.jsxs(material.Box, {
          component: "span",
          className: "data-object-end",
          children: [
              isArray ? arrayRb : objectRb,
              displayObjectSize ? /*#__PURE__*/ jsxRuntime.jsx(material.Box, {
                  component: "span",
                  sx: {
                      pl: 0.5,
                      fontStyle: 'italic',
                      color: metadataColor
                  },
                  children: sizeOfValue
              }) : null
          ]
      });
  };
  function getIterator(value) {
      return typeof (value === null || value === void 0 ? void 0 : value[Symbol.iterator]) === 'function';
  }
  const ObjectType = (props)=>{
      const keyColor = useTextColor();
      const borderColor = useJsonViewerStore((store)=>store.colorspace.base02);
      const groupArraysAfterLength = useJsonViewerStore((store)=>store.groupArraysAfterLength);
      const isTrap = useIsCycleReference(props.path, props.value);
      const [displayLength, setDisplayLength] = React.useState(useJsonViewerStore((store)=>store.maxDisplayLength));
      const objectSortKeys = useJsonViewerStore((store)=>store.objectSortKeys);
      const elements = React.useMemo(()=>{
          if (!props.inspect) {
              return null;
          }
          const value = props.value;
          const iterator = getIterator(value);
          // Array also has iterator, we skip it and treat it as an array as normal.
          if (iterator && !Array.isArray(value)) {
              const elements = [];
              if (value instanceof Map) {
                  for (const item of value){
                      // fixme: key might be a object, array, or any value for the `Map<any, any>`
                      const [k, value1] = item;
                      const key = `${k}`;
                      elements.push(/*#__PURE__*/ jsxRuntime.jsx(DataKeyPair, {
                          path: [
                              ...props.path,
                              key
                          ],
                          value: value1,
                          editable: false
                      }, key));
                  }
              } else {
                  let count = 0;
                  for (const item1 of value){
                      elements.push(/*#__PURE__*/ jsxRuntime.jsx(DataKeyPair, {
                          path: [
                              ...props.path,
                              `iterator:${count}`
                          ],
                          value: item1,
                          nestedIndex: count,
                          editable: false
                      }, count));
                      count++;
                  }
              }
              return elements;
          }
          if (Array.isArray(value)) {
              // unknown[]
              if (value.length <= groupArraysAfterLength) {
                  const elements1 = value.slice(0, displayLength).map((value, index)=>{
                      const path = [
                          ...props.path,
                          index
                      ];
                      return /*#__PURE__*/ jsxRuntime.jsx(DataKeyPair, {
                          path: path,
                          value: value
                      }, index);
                  });
                  if (value.length > displayLength) {
                      const rest = value.length - displayLength;
                      elements1.push(/*#__PURE__*/ jsxRuntime.jsxs(DataBox, {
                          sx: {
                              cursor: 'pointer',
                              lineHeight: 1.5,
                              color: keyColor,
                              letterSpacing: 0.5,
                              opacity: 0.8
                          },
                          onClick: ()=>setDisplayLength((length)=>length * 2),
                          children: [
                              "hidden ",
                              rest,
                              " items..."
                          ]
                      }, "last"));
                  }
                  return elements1;
              }
              const elements2 = groupItems.group(value).by((_, index)=>Math.floor(index / groupArraysAfterLength)).asArrays();
              return elements2.map((list, index)=>{
                  const path = [
                      ...props.path
                  ];
                  return /*#__PURE__*/ jsxRuntime.jsx(DataKeyPair, {
                      path: path,
                      value: list,
                      nestedIndex: index
                  }, index);
              });
          }
          // object
          let entries = Object.entries(value);
          if (objectSortKeys) {
              entries = entries.sort(([a], [b])=>objectSortKeys === true ? a.localeCompare(b) : objectSortKeys(a, b));
          }
          const elements3 = entries.slice(0, displayLength).map(([key, value])=>{
              const path = [
                  ...props.path,
                  key
              ];
              return /*#__PURE__*/ jsxRuntime.jsx(DataKeyPair, {
                  path: path,
                  value: value
              }, key);
          });
          if (entries.length > displayLength) {
              const rest1 = entries.length - displayLength;
              elements3.push(/*#__PURE__*/ jsxRuntime.jsxs(DataBox, {
                  sx: {
                      cursor: 'pointer',
                      lineHeight: 1.5,
                      color: keyColor,
                      letterSpacing: 0.5,
                      opacity: 0.8
                  },
                  onClick: ()=>setDisplayLength((length)=>length * 2),
                  children: [
                      "hidden ",
                      rest1,
                      " items..."
                  ]
              }, "last"));
          }
          return elements3;
      }, [
          props.inspect,
          props.value,
          props.path,
          groupArraysAfterLength,
          displayLength,
          keyColor,
          objectSortKeys
      ]);
      const marginLeft = props.inspect ? 0.6 : 0;
      const width = useJsonViewerStore((store)=>store.indentWidth);
      const indentWidth = props.inspect ? width - marginLeft : width;
      return /*#__PURE__*/ jsxRuntime.jsx(material.Box, {
          className: "data-object",
          sx: {
              display: props.inspect ? 'block' : 'inline-block',
              pl: props.inspect ? indentWidth - 0.6 : 0,
              marginLeft,
              color: keyColor,
              borderLeft: props.inspect ? `1px solid ${borderColor}` : 'none'
          },
          children: props.inspect ? elements : !isTrap ? /*#__PURE__*/ jsxRuntime.jsx(material.Box, {
              component: "span",
              className: "data-object-body",
              onClick: ()=>props.setInspect(true),
              sx: {
                  '&:hover': {
                      cursor: 'pointer'
                  }
              },
              children: "..."
          }) : null
      });
  };

  const createTypeRegistryStore = ()=>create(middleware.combine({
          registry: []
      }, (set)=>({
              registerTypes: (setState)=>{
                  set((state)=>({
                          registry: typeof setState === 'function' ? setState(state.registry) : setState
                      }));
              }
          })));
  const { Provider: TypeRegistryProvider , useStore: useTypeRegistryStore , useStoreApi: useTypeRegistryStoreApi  } = createContext();
  const objectType = {
      is: (value)=>typeof value === 'object',
      Component: ObjectType,
      PreComponent: PreObjectType,
      PostComponent: PostObjectType
  };
  function matchTypeComponents(value, path, registry) {
      let potential;
      for (const T of registry){
          if (T.is(value, path)) {
              potential = T;
              if (typeof value === 'object') {
                  // early return for case like `null`
                  return T;
              }
          }
      }
      if (potential === undefined) {
          if (typeof value === 'object') {
              return objectType;
          }
          throw new DevelopmentError('this is not possible');
      }
      return potential;
  }
  function useTypeComponents(value, path) {
      const registry = useTypeRegistryStore((store)=>store.registry);
      return React.useMemo(()=>matchTypeComponents(value, path, registry), [
          value,
          path,
          registry
      ]);
  }
  function predefined() {
      const types = [];
      function registerType(dataType) {
          function compare(prevProps, nextProps) {
              var _prevProps_path, _nextProps_path;
              return Object.is(prevProps.value, nextProps.value) && prevProps.inspect && nextProps.inspect && ((_prevProps_path = prevProps.path) === null || _prevProps_path === void 0 ? void 0 : _prevProps_path.join('.')) === ((_nextProps_path = nextProps.path) === null || _nextProps_path === void 0 ? void 0 : _nextProps_path.join('.'));
          }
          dataType.Component = /*#__PURE__*/ React.memo(dataType.Component, compare);
          if (dataType.Editor) {
              dataType.Editor = /*#__PURE__*/ React.memo(dataType.Editor, function compare(prevProps, nextProps) {
                  return Object.is(prevProps.value, nextProps.value);
              });
          }
          if (dataType.PreComponent) {
              dataType.PreComponent = /*#__PURE__*/ React.memo(dataType.PreComponent, compare);
          }
          if (dataType.PostComponent) {
              dataType.PostComponent = /*#__PURE__*/ React.memo(dataType.PostComponent, compare);
          }
          types.push(dataType);
      }
      registerType({
          is: (value)=>typeof value === 'boolean',
          ...createEasyType('bool', ({ value  })=>/*#__PURE__*/ jsxRuntime.jsx(jsxRuntime.Fragment, {
                  children: value ? 'true' : 'false'
              }), {
              colorKey: 'base0E',
              fromString: (value)=>Boolean(value)
          })
      });
      const displayOptions = {
          weekday: 'short',
          year: 'numeric',
          month: 'short',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
      };
      registerType({
          is: (value)=>value instanceof Date,
          ...createEasyType('date', ({ value  })=>/*#__PURE__*/ jsxRuntime.jsx(jsxRuntime.Fragment, {
                  children: value.toLocaleTimeString('en-us', displayOptions)
              }), {
              colorKey: 'base0D'
          })
      });
      registerType({
          is: (value)=>value === null,
          ...createEasyType('null', ()=>{
              const backgroundColor = useJsonViewerStore((store)=>store.colorspace.base02);
              return /*#__PURE__*/ jsxRuntime.jsx(material.Box, {
                  sx: {
                      fontSize: '0.8rem',
                      backgroundColor,
                      fontWeight: 'bold',
                      borderRadius: '3px',
                      padding: '0.5px 2px'
                  },
                  children: "NULL"
              });
          }, {
              colorKey: 'base08',
              displayTypeLabel: false
          })
      });
      registerType({
          is: (value)=>value === undefined,
          ...createEasyType('undefined', ()=>{
              const backgroundColor = useJsonViewerStore((store)=>store.colorspace.base02);
              return /*#__PURE__*/ jsxRuntime.jsx(material.Box, {
                  sx: {
                      fontSize: '0.7rem',
                      backgroundColor,
                      borderRadius: '3px',
                      padding: '0.5px 2px'
                  },
                  children: "undefined"
              });
          }, {
              colorKey: 'base05',
              displayTypeLabel: false
          })
      });
      registerType({
          is: (value)=>typeof value === 'string',
          ...createEasyType('string', (props)=>{
              const [showRest, setShowRest] = React.useState(false);
              const collapseStringsAfterLength = useJsonViewerStore((store)=>store.collapseStringsAfterLength);
              const value = showRest ? props.value : props.value.slice(0, collapseStringsAfterLength);
              const hasRest = props.value.length > collapseStringsAfterLength;
              return /*#__PURE__*/ jsxRuntime.jsxs(material.Box, {
                  component: "span",
                  sx: {
                      overflowWrap: 'anywhere',
                      cursor: hasRest ? 'pointer' : 'inherit'
                  },
                  onClick: ()=>{
                      setShowRest((value)=>!value);
                  },
                  children: [
                      '"',
                      value,
                      showRest ? /*#__PURE__*/ jsxRuntime.jsx("span", {
                          children: "..."
                      }) : /*#__PURE__*/ jsxRuntime.jsx(jsxRuntime.Fragment, {}),
                      '"'
                  ]
              });
          }, {
              colorKey: 'base09',
              fromString: (value)=>value
          })
      });
      registerType({
          is: (value)=>typeof value === 'function',
          Component: FunctionType,
          PreComponent: PreFunctionType,
          PostComponent: PostFunctionType
      });
      const isInt = (n)=>n % 1 === 0;
      registerType({
          is: (value)=>typeof value === 'number' && isNaN(value),
          ...createEasyType('NaN', ()=>{
              const backgroundColor = useJsonViewerStore((store)=>store.colorspace.base02);
              return /*#__PURE__*/ jsxRuntime.jsx(material.Box, {
                  sx: {
                      backgroundColor,
                      fontSize: '0.8rem',
                      fontWeight: 'bold',
                      borderRadius: '3px'
                  },
                  children: "NaN"
              });
          }, {
              colorKey: 'base08',
              displayTypeLabel: false
          })
      });
      registerType({
          is: (value)=>typeof value === 'number' && !isInt(value),
          ...createEasyType('float', ({ value  })=>/*#__PURE__*/ jsxRuntime.jsx(jsxRuntime.Fragment, {
                  children: `${value}`
              }), {
              colorKey: 'base0B',
              fromString: (value)=>parseFloat(value)
          })
      });
      registerType({
          is: (value)=>typeof value === 'number' && isInt(value),
          ...createEasyType('int', ({ value  })=>/*#__PURE__*/ jsxRuntime.jsx(jsxRuntime.Fragment, {
                  children: `${value}`
              }), {
              colorKey: 'base0F',
              fromString: (value)=>parseInt(value)
          })
      });
      registerType({
          is: (value)=>typeof value === 'bigint',
          ...createEasyType('bigint', ({ value  })=>/*#__PURE__*/ jsxRuntime.jsx(jsxRuntime.Fragment, {
                  children: `${value}n`
              }), {
              colorKey: 'base0F',
              fromString: (value)=>BigInt(value.replace(/\D/g, ''))
          })
      });
      return types;
  }

  const IconBox = material.styled((props)=>/*#__PURE__*/ jsxRuntime.jsx(material.Box, {
          ...props,
          component: "span"
      }))`
  cursor: pointer;
  padding-left: 0.7rem;
`;
  const DataKeyPair = (props)=>{
      const { value , path , nestedIndex  } = props;
      var _props_editable;
      const propsEditable = (_props_editable = props.editable) !== null && _props_editable !== void 0 ? _props_editable : undefined;
      const storeEditable = useJsonViewerStore((store)=>store.editable);
      const editable = React.useMemo(()=>{
          if (storeEditable === false) {
              return false;
          }
          if (propsEditable === false) {
              // props.editable is false which means we cannot provide the suitable way to edit it
              return false;
          }
          if (typeof storeEditable === 'function') {
              return !!storeEditable(path, value);
          }
          return storeEditable;
      }, [
          path,
          propsEditable,
          storeEditable,
          value
      ]);
      const [tempValue, setTempValue] = React.useState(typeof value === 'function' ? ()=>value : value);
      const depth = path.length;
      const key = path[depth - 1];
      const hoverPath = useJsonViewerStore((store)=>store.hoverPath);
      const isHover = React.useMemo(()=>{
          return hoverPath && path.every((value, index)=>value === hoverPath.path[index] && nestedIndex === hoverPath.nestedIndex);
      }, [
          hoverPath,
          path,
          nestedIndex
      ]);
      const setHover = useJsonViewerStore((store)=>store.setHover);
      const root = useJsonViewerStore((store)=>store.value);
      const [inspect, setInspect] = useInspect(path, value, nestedIndex);
      const [editing, setEditing] = React.useState(false);
      const onChange = useJsonViewerStore((store)=>store.onChange);
      const keyColor = useTextColor();
      const numberKeyColor = useJsonViewerStore((store)=>store.colorspace.base0C);
      const { Component , PreComponent , PostComponent , Editor  } = useTypeComponents(value, path);
      const quotesOnKeys = useJsonViewerStore((store)=>store.quotesOnKeys);
      const rootName = useJsonViewerStore((store)=>store.rootName);
      const isRoot = root === value;
      const isNumberKey = Number.isInteger(Number(key));
      const enableClipboard = useJsonViewerStore((store)=>store.enableClipboard);
      const { copy , copied  } = useClipboard();
      const actionIcons = React.useMemo(()=>{
          if (editing) {
              return /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
                  children: [
                      /*#__PURE__*/ jsxRuntime.jsx(IconBox, {
                          children: /*#__PURE__*/ jsxRuntime.jsx(iconsMaterial.Close, {
                              sx: {
                                  fontSize: '.8rem'
                              },
                              onClick: ()=>{
                                  // abort editing
                                  setEditing(false);
                                  setTempValue(value);
                              }
                          })
                      }),
                      /*#__PURE__*/ jsxRuntime.jsx(IconBox, {
                          children: /*#__PURE__*/ jsxRuntime.jsx(iconsMaterial.Check, {
                              sx: {
                                  fontSize: '.8rem'
                              },
                              onClick: ()=>{
                                  // finish editing, save data
                                  setEditing(false);
                                  onChange(path, value, tempValue);
                              }
                          })
                      })
                  ]
              });
          }
          return /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
              children: [
                  enableClipboard && /*#__PURE__*/ jsxRuntime.jsx(IconBox, {
                      onClick: (event)=>{
                          event.preventDefault();
                          try {
                              copy(path, value);
                          } catch (e) {
                              // in some case, this will throw error
                              // for example: circular structure
                              // fixme: `useAlert` hook
                              console.error(e);
                          }
                      },
                      children: copied ? /*#__PURE__*/ jsxRuntime.jsx(iconsMaterial.Check, {
                          sx: {
                              fontSize: '.8rem'
                          }
                      }) : /*#__PURE__*/ jsxRuntime.jsx(iconsMaterial.ContentCopy, {
                          sx: {
                              fontSize: '.8rem'
                          }
                      })
                  }),
                  Editor && editable && /*#__PURE__*/ jsxRuntime.jsx(IconBox, {
                      onClick: (event)=>{
                          event.preventDefault();
                          setEditing(true);
                      },
                      children: /*#__PURE__*/ jsxRuntime.jsx(iconsMaterial.Edit, {
                          sx: {
                              fontSize: '.8rem'
                          }
                      })
                  })
              ]
          });
      }, [
          Editor,
          copied,
          copy,
          editable,
          editing,
          enableClipboard,
          onChange,
          path,
          tempValue,
          value
      ]);
      const expandable = !!(PreComponent && PostComponent);
      const KeyRenderer = useJsonViewerStore((store)=>store.keyRenderer);
      const downstreamProps = React.useMemo(()=>({
              path,
              inspect,
              setInspect,
              value
          }), [
          inspect,
          path,
          setInspect,
          value
      ]);
      return /*#__PURE__*/ jsxRuntime.jsxs(material.Box, {
          className: "data-key-pair",
          "data-testid": 'data-key-pair' + path.join('.'),
          onMouseEnter: React.useCallback(()=>setHover(path, nestedIndex), [
              setHover,
              path,
              nestedIndex
          ]),
          children: [
              /*#__PURE__*/ jsxRuntime.jsxs(DataBox, {
                  component: "span",
                  className: "data-key",
                  sx: {
                      lineHeight: 1.5,
                      color: keyColor,
                      letterSpacing: 0.5,
                      opacity: 0.8
                  },
                  onClick: React.useCallback((event)=>{
                      if (event.isDefaultPrevented()) {
                          return;
                      }
                      setInspect((state)=>!state);
                  }, [
                      setInspect
                  ]),
                  children: [
                      expandable ? inspect ? /*#__PURE__*/ jsxRuntime.jsx(iconsMaterial.ExpandMore, {
                          sx: {
                              fontSize: '.8rem',
                              '&:hover': {
                                  cursor: 'pointer'
                              }
                          }
                      }) : /*#__PURE__*/ jsxRuntime.jsx(iconsMaterial.ChevronRight, {
                          sx: {
                              fontSize: '.8rem',
                              '&:hover': {
                                  cursor: 'pointer'
                              }
                          }
                      }) : null,
                      isRoot ? rootName !== false ? quotesOnKeys ? /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
                          children: [
                              '"',
                              rootName,
                              '"'
                          ]
                      }) : /*#__PURE__*/ jsxRuntime.jsx(jsxRuntime.Fragment, {
                          children: rootName
                      }) : null : KeyRenderer.when(downstreamProps) ? /*#__PURE__*/ jsxRuntime.jsx(KeyRenderer, {
                          ...downstreamProps
                      }) : nestedIndex === undefined && (isNumberKey ? /*#__PURE__*/ jsxRuntime.jsx(material.Box, {
                          component: "span",
                          style: {
                              color: numberKeyColor
                          },
                          children: key
                      }) : quotesOnKeys ? /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
                          children: [
                              '"',
                              key,
                              '"'
                          ]
                      }) : /*#__PURE__*/ jsxRuntime.jsx(jsxRuntime.Fragment, {
                          children: key
                      })),
                      isRoot ? rootName !== false ? /*#__PURE__*/ jsxRuntime.jsx(DataBox, {
                          sx: {
                              mx: 0.5
                          },
                          children: ":"
                      }) : null : nestedIndex === undefined && /*#__PURE__*/ jsxRuntime.jsx(DataBox, {
                          sx: {
                              mx: 0.5
                          },
                          children: ":"
                      }),
                      PreComponent && /*#__PURE__*/ jsxRuntime.jsx(PreComponent, {
                          ...downstreamProps
                      }),
                      isHover && expandable && inspect && actionIcons
                  ]
              }),
              editing && editable ? Editor && /*#__PURE__*/ jsxRuntime.jsx(Editor, {
                  value: tempValue,
                  setValue: setTempValue
              }) : Component ? /*#__PURE__*/ jsxRuntime.jsx(Component, {
                  ...downstreamProps
              }) : /*#__PURE__*/ jsxRuntime.jsx(material.Box, {
                  component: "span",
                  className: "data-value-fallback",
                  children: `fallback: ${value}`
              }),
              PostComponent && /*#__PURE__*/ jsxRuntime.jsx(PostComponent, {
                  ...downstreamProps
              }),
              isHover && expandable && !inspect && actionIcons,
              isHover && !expandable && actionIcons
          ]
      });
  };

  const query = '(prefers-color-scheme: dark)';
  function useThemeDetector() {
      const [isDark, setIsDark] = React.useState(false);
      React.useEffect(()=>{
          const listener = (e)=>{
              setIsDark(e.matches);
          };
          setIsDark(window.matchMedia(query).matches);
          const queryMedia = window.matchMedia(query);
          queryMedia.addEventListener('change', listener);
          return ()=>queryMedia.removeEventListener('change', listener);
      }, []);
      return isDark;
  }

  /**
   * @internal
   */ function useSetIfNotUndefinedEffect(key, value) {
      const api = useJsonViewerStoreApi();
      React.useEffect(()=>{
          if (value !== undefined) {
              api.setState({
                  [key]: value
              });
          }
      }, [
          key,
          value,
          api
      ]);
  }
  /**
   * @internal
   */ const JsonViewerInner = (props)=>{
      const api = useJsonViewerStoreApi();
      useSetIfNotUndefinedEffect('value', props.value);
      useSetIfNotUndefinedEffect('editable', props.editable);
      useSetIfNotUndefinedEffect('indentWidth', props.indentWidth);
      useSetIfNotUndefinedEffect('onChange', props.onChange);
      useSetIfNotUndefinedEffect('groupArraysAfterLength', props.groupArraysAfterLength);
      useSetIfNotUndefinedEffect('keyRenderer', props.keyRenderer);
      useSetIfNotUndefinedEffect('maxDisplayLength', props.maxDisplayLength);
      useSetIfNotUndefinedEffect('enableClipboard', props.enableClipboard);
      useSetIfNotUndefinedEffect('rootName', props.rootName);
      useSetIfNotUndefinedEffect('displayDataTypes', props.displayDataTypes);
      useSetIfNotUndefinedEffect('displayObjectSize', props.displayObjectSize);
      useSetIfNotUndefinedEffect('onCopy', props.onCopy);
      React.useEffect(()=>{
          if (props.theme === 'light') {
              api.setState({
                  colorspace: lightColorspace
              });
          } else if (props.theme === 'dark') {
              api.setState({
                  colorspace: darkColorspace
              });
          } else if (typeof props.theme === 'object') {
              api.setState({
                  colorspace: props.theme
              });
          }
      }, [
          api,
          props.theme
      ]);
      const onceRef = React.useRef(true);
      const predefinedTypes = React.useMemo(()=>predefined(), []);
      const registerTypes = useTypeRegistryStore((store)=>store.registerTypes);
      if (onceRef.current) {
          var _props_valueTypes;
          const allTypes = [
              ...predefinedTypes
          ];
          (_props_valueTypes = props.valueTypes) === null || _props_valueTypes === void 0 ? void 0 : _props_valueTypes.forEach((type)=>{
              allTypes.push(type);
          });
          registerTypes(allTypes);
          onceRef.current = false;
      }
      React.useEffect(()=>{
          var _props_valueTypes;
          const allTypes = [
              ...predefinedTypes
          ];
          (_props_valueTypes = props.valueTypes) === null || _props_valueTypes === void 0 ? void 0 : _props_valueTypes.forEach((type)=>{
              allTypes.push(type);
          });
          registerTypes(allTypes);
      }, [
          predefinedTypes,
          props.valueTypes,
          registerTypes
      ]);
      const value = useJsonViewerStore((store)=>store.value);
      const setHover = useJsonViewerStore((store)=>store.setHover);
      return /*#__PURE__*/ jsxRuntime.jsx(material.Paper, {
          elevation: 0,
          className: props.className,
          style: props.style,
          sx: {
              fontFamily: 'monospace',
              userSelect: 'none',
              contentVisibility: 'auto'
          },
          onMouseLeave: React.useCallback(()=>{
              setHover(null);
          }, [
              setHover
          ]),
          children: /*#__PURE__*/ jsxRuntime.jsx(DataKeyPair, {
              value: value,
              path: React.useMemo(()=>[], [])
          })
      });
  };
  const JsonViewer = function JsonViewer(props) {
      const isAutoDarkTheme = useThemeDetector();
      var _props_theme;
      const themeType = React.useMemo(()=>props.theme === 'auto' ? isAutoDarkTheme ? 'light' : 'dark' : (_props_theme = props.theme) !== null && _props_theme !== void 0 ? _props_theme : 'light', [
          isAutoDarkTheme,
          props.theme
      ]);
      const theme = React.useMemo(()=>{
          const backgroundColor = typeof themeType === 'object' ? themeType.base00 : themeType === 'dark' ? darkColorspace.base00 : lightColorspace.base00;
          return material.createTheme({
              components: {
                  MuiPaper: {
                      styleOverrides: {
                          root: {
                              backgroundColor
                          }
                      }
                  }
              },
              palette: {
                  mode: themeType === 'dark' ? 'dark' : 'light',
                  background: {
                      default: backgroundColor
                  }
              }
          });
      }, [
          themeType
      ]);
      const mixedProps = {
          ...props,
          theme: themeType
      };
      return /*#__PURE__*/ jsxRuntime.jsx(material.ThemeProvider, {
          theme: theme,
          children: /*#__PURE__*/ jsxRuntime.jsx(TypeRegistryProvider, {
              createStore: createTypeRegistryStore,
              children: /*#__PURE__*/ jsxRuntime.jsx(JsonViewerProvider, {
                  createStore: ()=>{
                      // This function only runs once, so we don't need a memo for this.
                      //  Refs: https://github.com/pmndrs/zustand/blob/77d14b17bc33a6f10f072802fac56aa78510710e/src/context.ts#L36-L38
                      return createJsonViewerStore(props);
                  },
                  children: /*#__PURE__*/ jsxRuntime.jsx(JsonViewerInner, {
                      ...mixedProps
                  })
              })
          })
      });
  };

  exports.JsonViewer = JsonViewer;
  exports.applyValue = applyValue;
  exports.createDataType = createDataType;
  exports.darkColorspace = darkColorspace;
  exports.isCycleReference = isCycleReference;
  exports.lightColorspace = lightColorspace;

}));
