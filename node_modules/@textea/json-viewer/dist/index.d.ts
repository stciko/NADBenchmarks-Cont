import React, { Dispatch, SetStateAction } from 'react';

type NamedColorspace = {
    scheme: string;
    author: string;
} & Colorspace;
type Colorspace = {
    base00: string;
    base01: string;
    base02: string;
    base03: string;
    base04: string;
    base05: string;
    base06: string;
    base07: string;
    base08: string;
    base09: string;
    base0A: string;
    base0B: string;
    base0C: string;
    base0D: string;
    base0E: string;
    base0F: string;
};
declare const lightColorspace: NamedColorspace;
declare const darkColorspace: NamedColorspace;

type Path = (string | number)[];
/**
 * @param path path to the target value
 * @param oldValue
 * @param newValue
 */
type JsonViewerOnChange = <U = unknown>(path: Path, oldValue: U, newValue: U) => void;
/**
 *  @param path path to the target value
 *  @param value
 */
type JsonViewerOnCopy = <U = unknown>(path: Path, value: U) => unknown | Promise<unknown>;
interface DataItemProps<ValueType = unknown> {
    inspect: boolean;
    setInspect: Dispatch<SetStateAction<boolean>>;
    value: ValueType;
    path: Path;
}
type EditorProps<ValueType = unknown> = {
    value: ValueType;
    setValue: React.Dispatch<ValueType>;
};
type DataType<ValueType = unknown> = {
    /**
     * Whether the value belongs to the data type
     */
    is: (value: unknown, path: Path) => boolean;
    Component: React.ComponentType<DataItemProps<ValueType>>;
    Editor?: React.ComponentType<EditorProps<ValueType>>;
    PreComponent?: React.ComponentType<DataItemProps<ValueType>>;
    PostComponent?: React.ComponentType<DataItemProps<ValueType>>;
};
interface JsonViewerKeyRenderer extends React.FC<DataItemProps> {
    when(props: DataItemProps): boolean;
}
type JsonViewerTheme = 'light' | 'dark' | 'auto' | Colorspace;
type JsonViewerProps<T = unknown> = {
    /**
     * Name of the root value
     *
     * @default "root"
     */
    rootName?: false | string;
    /**
     * Any value, `object`, `Array`, primitive type, even `Map` or `Set`.
     */
    value: T;
    /**
     * Indent width for nested objects
     * @default 3
     */
    indentWidth?: number;
    /**
     * Customize a key, if `keyRenderer.when` returns `true`.
     */
    keyRenderer?: JsonViewerKeyRenderer;
    valueTypes?: DataType<any>[];
    onChange?: JsonViewerOnChange;
    onCopy?: JsonViewerOnCopy;
    /**
     * Whether enable clipboard feature.
     *
     * @default true
     */
    enableClipboard?: boolean;
    /**
     * Whether this value can be edited.
     *
     * Pass `false` to turn off the edit feature.
     * Pass a function to customize the result.
     *
     * @default false
     */
    editable?: boolean | (<U = unknown>(path: Path, currentValue: U) => boolean);
    /**
     * Inspect depth by default.
     * Do not set the number too large, otherwise there will have performance issue
     * @default 5
     */
    defaultInspectDepth?: number;
    /**
     * Hide items after reaching the count.
     * Array and object will be affected.
     *
     * If `Object.keys(value).length` is large also, this will cause a performance issue.
     * @default 30
     */
    maxDisplayLength?: number;
    /**
     * When an integer value is assigned, arrays will be displayed in groups by count of the value.
     * Groups are displayed with bracket notation and can be expanded and collapsed by clicking on the brackets.
     * @default 100
     */
    groupArraysAfterLength?: number;
    /**
     * When an integer value is assigned, strings will be cut off at that length.
     * Collapsed strings are followed by an ellipsis.
     *
     * String content can be expanded and collapsed by clicking on the string value.
     *
     * @default 50
     */
    collapseStringsAfterLength?: number | false;
    /**
     * Whether sort keys through `String.prototype.localeCompare()`
     *
     * @default false
     */
    objectSortKeys?: boolean | ((a: string, b: string) => number);
    /**
     * set `false` to remove quotes from keys
     *
     * true for `"name"`, false for `name`
     *
     * @default true
     */
    quotesOnKeys?: boolean;
    /**
     * Whether display data type labels
     *
     * @default true
     */
    displayDataTypes?: boolean;
    className?: string;
    style?: React.CSSProperties;
    /**
     *
     * @default 'light'
     */
    theme?: JsonViewerTheme;
    /**
     * Whether display the size of array and object
     *
     * @default true
     */
    displayObjectSize?: boolean;
};

declare const applyValue: (obj: any, path: (string | number)[], value: any) => any;
declare function createDataType<ValueType = unknown>(is: (value: unknown, path: Path) => boolean, Component: React.ComponentType<DataItemProps<ValueType>>): {
    is: (value: unknown, path: Path) => boolean;
    Component: React.ComponentType<DataItemProps<ValueType>>;
};
declare function createDataType<ValueType = unknown>(is: (value: unknown, path: Path) => boolean, Component: React.ComponentType<DataItemProps<ValueType>>, Editor: React.ComponentType<EditorProps<ValueType>>): {
    is: (value: unknown, path: Path) => boolean;
    Component: React.ComponentType<DataItemProps<ValueType>>;
    Editor: React.ComponentType<DataItemProps<ValueType>>;
};
declare function createDataType<ValueType = unknown>(is: (value: unknown, path: Path) => boolean, Component: React.ComponentType<DataItemProps<ValueType>>, Editor: undefined, PreComponent: React.ComponentType<DataItemProps<ValueType>>, PostComponent: React.ComponentType<DataItemProps<ValueType>>): {
    is: (value: unknown, path: Path) => boolean;
    Component: React.ComponentType<DataItemProps<ValueType>>;
    PreComponent: React.ComponentType<DataItemProps<ValueType>>;
    PostComponent: React.ComponentType<DataItemProps<ValueType>>;
};
declare function createDataType<ValueType = unknown>(is: (value: unknown, path: Path) => boolean, Component: React.ComponentType<DataItemProps<ValueType>>, Editor: React.ComponentType<EditorProps<ValueType>>, PreComponent: React.ComponentType<DataItemProps<ValueType>>, PostComponent: React.ComponentType<DataItemProps<ValueType>>): {
    is: (value: unknown, path: Path) => boolean;
    Component: React.ComponentType<DataItemProps<ValueType>>;
    Editor: React.ComponentType<DataItemProps<ValueType>>;
    PreComponent: React.ComponentType<DataItemProps<ValueType>>;
    PostComponent: React.ComponentType<DataItemProps<ValueType>>;
};
declare const isCycleReference: (root: any, path: (string | number)[], value: unknown) => false | string;

declare const JsonViewer: <Value>(props: JsonViewerProps<Value>) => React.ReactElement;

export { Colorspace, DataItemProps, DataType, EditorProps, JsonViewer, JsonViewerKeyRenderer, JsonViewerOnChange, JsonViewerOnCopy, JsonViewerProps, JsonViewerTheme, NamedColorspace, Path, applyValue, createDataType, darkColorspace, isCycleReference, lightColorspace };
